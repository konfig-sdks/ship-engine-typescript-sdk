/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressResidentialIndicator } from '../models';
// @ts-ignore
import { BulkRate } from '../models';
// @ts-ignore
import { CalculateRatesResponseBody } from '../models';
// @ts-ignore
import { DeliveryConfirmation } from '../models';
// @ts-ignore
import { Dimensions } from '../models';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { Rate } from '../models';
// @ts-ignore
import { RateEstimate } from '../models';
// @ts-ignore
import { RateEstimateOptions } from '../models';
// @ts-ignore
import { RateRequestBody } from '../models';
// @ts-ignore
import { RateRequestOptions } from '../models';
// @ts-ignore
import { RateRequestRateOptions } from '../models';
// @ts-ignore
import { Weight } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RatesApi - axios parameter creator
 * @export
 */
export const RatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Bulk Shipment Rates
         * @summary Get Bulk Rates
         * @param {RateRequestRateOptions} rateRequestRateOptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulkShipmentRates: async (rateRequestRateOptions: RateRequestRateOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rateRequestRateOptions' is not null or undefined
            assertParamExists('getBulkShipmentRates', 'rateRequestRateOptions', rateRequestRateOptions)
            const localVarPath = `/v1/rates/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: rateRequestRateOptions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/rates/bulk',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(rateRequestRateOptions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a previously queried rate by its ID
         * @summary Get Rate By ID
         * @param {string} rateId Rate ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (rateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('getById', 'rateId', rateId)
            const localVarPath = `/v1/rates/{rate_id}`
                .replace(`{${"rate_id"}}`, encodeURIComponent(String(rateId !== undefined ? rateId : `-rate_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/rates/{rate_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * It\'s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don\'t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
         * @summary Get Shipping Rates
         * @param {RateRequestOptions} rateRequestOptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rates: async (rateRequestOptions: RateRequestOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rateRequestOptions' is not null or undefined
            assertParamExists('rates', 'rateRequestOptions', rateRequestOptions)
            const localVarPath = `/v1/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: rateRequestOptions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/rates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(rateRequestOptions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Rate Estimates
         * @summary Estimate Rates
         * @param {RateEstimateOptions} rateEstimateOptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rates_1: async (rateEstimateOptions: RateEstimateOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rateEstimateOptions' is not null or undefined
            assertParamExists('rates_1', 'rateEstimateOptions', rateEstimateOptions)
            const localVarPath = `/v1/rates/estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: rateEstimateOptions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/rates/estimate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(rateEstimateOptions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatesApi - functional programming interface
 * @export
 */
export const RatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Bulk Shipment Rates
         * @summary Get Bulk Rates
         * @param {RatesApiGetBulkShipmentRatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBulkShipmentRates(requestParameters: RatesApiGetBulkShipmentRatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BulkRate>>> {
            const rateRequestRateOptions: RateRequestRateOptions = {
                rate_options: requestParameters.rate_options
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBulkShipmentRates(rateRequestRateOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a previously queried rate by its ID
         * @summary Get Rate By ID
         * @param {RatesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: RatesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * It\'s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don\'t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
         * @summary Get Shipping Rates
         * @param {RatesApiRatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rates(requestParameters: RatesApiRatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateRatesResponseBody>> {
            const rateRequestOptions: RateRequestOptions = {
                rate_options: requestParameters.rate_options
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.rates(rateRequestOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Rate Estimates
         * @summary Estimate Rates
         * @param {RatesApiRates0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rates_1(requestParameters: RatesApiRates0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RateEstimate>>> {
            const rateEstimateOptions: RateEstimateOptions = {
                from_country_code: requestParameters.from_country_code,
                from_postal_code: requestParameters.from_postal_code,
                from_city_locality: requestParameters.from_city_locality,
                from_state_province: requestParameters.from_state_province,
                to_country_code: requestParameters.to_country_code,
                to_postal_code: requestParameters.to_postal_code,
                to_city_locality: requestParameters.to_city_locality,
                to_state_province: requestParameters.to_state_province,
                weight: requestParameters.weight,
                dimensions: requestParameters.dimensions,
                confirmation: requestParameters.confirmation,
                address_residential_indicator: requestParameters.address_residential_indicator,
                ship_date: requestParameters.ship_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.rates_1(rateEstimateOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RatesApi - factory interface
 * @export
 */
export const RatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RatesApiFp(configuration)
    return {
        /**
         * Get Bulk Shipment Rates
         * @summary Get Bulk Rates
         * @param {RatesApiGetBulkShipmentRatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulkShipmentRates(requestParameters: RatesApiGetBulkShipmentRatesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BulkRate>> {
            return localVarFp.getBulkShipmentRates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a previously queried rate by its ID
         * @summary Get Rate By ID
         * @param {RatesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: RatesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Rate> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * It\'s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don\'t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
         * @summary Get Shipping Rates
         * @param {RatesApiRatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rates(requestParameters: RatesApiRatesRequest, options?: AxiosRequestConfig): AxiosPromise<CalculateRatesResponseBody> {
            return localVarFp.rates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Rate Estimates
         * @summary Estimate Rates
         * @param {RatesApiRates0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rates_1(requestParameters: RatesApiRates0Request, options?: AxiosRequestConfig): AxiosPromise<Array<RateEstimate>> {
            return localVarFp.rates_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBulkShipmentRates operation in RatesApi.
 * @export
 * @interface RatesApiGetBulkShipmentRatesRequest
 */
export type RatesApiGetBulkShipmentRatesRequest = {
    
} & RateRequestRateOptions

/**
 * Request parameters for getById operation in RatesApi.
 * @export
 * @interface RatesApiGetByIdRequest
 */
export type RatesApiGetByIdRequest = {
    
    /**
    * Rate ID
    * @type {string}
    * @memberof RatesApiGetById
    */
    readonly rateId: string
    
}

/**
 * Request parameters for rates operation in RatesApi.
 * @export
 * @interface RatesApiRatesRequest
 */
export type RatesApiRatesRequest = {
    
} & RateRequestOptions

/**
 * Request parameters for rates_1 operation in RatesApi.
 * @export
 * @interface RatesApiRates0Request
 */
export type RatesApiRates0Request = {
    
} & RateEstimateOptions

/**
 * RatesApiGenerated - object-oriented interface
 * @export
 * @class RatesApiGenerated
 * @extends {BaseAPI}
 */
export class RatesApiGenerated extends BaseAPI {
    /**
     * Get Bulk Shipment Rates
     * @summary Get Bulk Rates
     * @param {RatesApiGetBulkShipmentRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApiGenerated
     */
    public getBulkShipmentRates(requestParameters: RatesApiGetBulkShipmentRatesRequest, options?: AxiosRequestConfig) {
        return RatesApiFp(this.configuration).getBulkShipmentRates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a previously queried rate by its ID
     * @summary Get Rate By ID
     * @param {RatesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApiGenerated
     */
    public getById(requestParameters: RatesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return RatesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * It\'s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don\'t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
     * @summary Get Shipping Rates
     * @param {RatesApiRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApiGenerated
     */
    public rates(requestParameters: RatesApiRatesRequest, options?: AxiosRequestConfig) {
        return RatesApiFp(this.configuration).rates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Rate Estimates
     * @summary Estimate Rates
     * @param {RatesApiRates0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApiGenerated
     */
    public rates_1(requestParameters: RatesApiRates0Request, options?: AxiosRequestConfig) {
        return RatesApiFp(this.configuration).rates_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
