/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddFundsToCarrierResponseBody } from '../models';
// @ts-ignore
import { Carrier } from '../models';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { GetCarrierOptionsResponseBody } from '../models';
// @ts-ignore
import { GetCarriersResponseBody } from '../models';
// @ts-ignore
import { ListCarrierPackageTypesResponseBody } from '../models';
// @ts-ignore
import { ListCarrierServicesResponseBody } from '../models';
// @ts-ignore
import { MonetaryValue } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CarriersApi - axios parameter creator
 * @export
 */
export const CarriersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Funds To A Carrier
         * @summary Add Funds To Carrier
         * @param {string} carrierId Carrier ID
         * @param {MonetaryValue} monetaryValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFundsToCarrier: async (carrierId: string, monetaryValue: MonetaryValue, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('addFundsToCarrier', 'carrierId', carrierId)
            // verify required parameter 'monetaryValue' is not null or undefined
            assertParamExists('addFundsToCarrier', 'monetaryValue', monetaryValue)
            const localVarPath = `/v1/carriers/{carrier_id}/add_funds`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: monetaryValue,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/carriers/{carrier_id}/add_funds',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(monetaryValue, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all carriers that have been added to this account
         * @summary List Carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carriers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/carriers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/carriers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disconnect a Carrier of the given ID from the account
         * @summary Disconnect Carrier by ID
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disconnectById: async (carrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('disconnectById', 'carrierId', carrierId)
            const localVarPath = `/v1/carriers/{carrier_id}`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/carriers/{carrier_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrive carrier info by ID
         * @summary Get Carrier By ID
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (carrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('getById', 'carrierId', carrierId)
            const localVarPath = `/v1/carriers/{carrier_id}`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/carriers/{carrier_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the options available for the carrier
         * @summary Get Carrier Options
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions: async (carrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('getOptions', 'carrierId', carrierId)
            const localVarPath = `/v1/carriers/{carrier_id}/options`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/carriers/{carrier_id}/options',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the package types associated with the carrier
         * @summary List Carrier Package Types
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackageTypes: async (carrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('listPackageTypes', 'carrierId', carrierId)
            const localVarPath = `/v1/carriers/{carrier_id}/packages`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/carriers/{carrier_id}/packages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the services associated with the carrier ID
         * @summary List Carrier Services
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServices: async (carrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('listServices', 'carrierId', carrierId)
            const localVarPath = `/v1/carriers/{carrier_id}/services`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/carriers/{carrier_id}/services',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarriersApi - functional programming interface
 * @export
 */
export const CarriersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarriersApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Funds To A Carrier
         * @summary Add Funds To Carrier
         * @param {CarriersApiAddFundsToCarrierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFundsToCarrier(requestParameters: CarriersApiAddFundsToCarrierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddFundsToCarrierResponseBody>> {
            const monetaryValue: MonetaryValue = {
                currency: requestParameters.currency,
                amount: requestParameters.amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFundsToCarrier(requestParameters.carrierId, monetaryValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all carriers that have been added to this account
         * @summary List Carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carriers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarriersResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carriers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Disconnect a Carrier of the given ID from the account
         * @summary Disconnect Carrier by ID
         * @param {CarriersApiDisconnectByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disconnectById(requestParameters: CarriersApiDisconnectByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disconnectById(requestParameters.carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrive carrier info by ID
         * @summary Get Carrier By ID
         * @param {CarriersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CarriersApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Carrier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the options available for the carrier
         * @summary Get Carrier Options
         * @param {CarriersApiGetOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOptions(requestParameters: CarriersApiGetOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarrierOptionsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOptions(requestParameters.carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the package types associated with the carrier
         * @summary List Carrier Package Types
         * @param {CarriersApiListPackageTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackageTypes(requestParameters: CarriersApiListPackageTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCarrierPackageTypesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackageTypes(requestParameters.carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the services associated with the carrier ID
         * @summary List Carrier Services
         * @param {CarriersApiListServicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServices(requestParameters: CarriersApiListServicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCarrierServicesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServices(requestParameters.carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CarriersApi - factory interface
 * @export
 */
export const CarriersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarriersApiFp(configuration)
    return {
        /**
         * Add Funds To A Carrier
         * @summary Add Funds To Carrier
         * @param {CarriersApiAddFundsToCarrierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFundsToCarrier(requestParameters: CarriersApiAddFundsToCarrierRequest, options?: AxiosRequestConfig): AxiosPromise<AddFundsToCarrierResponseBody> {
            return localVarFp.addFundsToCarrier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all carriers that have been added to this account
         * @summary List Carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carriers(options?: AxiosRequestConfig): AxiosPromise<GetCarriersResponseBody> {
            return localVarFp.carriers(options).then((request) => request(axios, basePath));
        },
        /**
         * Disconnect a Carrier of the given ID from the account
         * @summary Disconnect Carrier by ID
         * @param {CarriersApiDisconnectByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disconnectById(requestParameters: CarriersApiDisconnectByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.disconnectById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrive carrier info by ID
         * @summary Get Carrier By ID
         * @param {CarriersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CarriersApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Carrier> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the options available for the carrier
         * @summary Get Carrier Options
         * @param {CarriersApiGetOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions(requestParameters: CarriersApiGetOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<GetCarrierOptionsResponseBody> {
            return localVarFp.getOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the package types associated with the carrier
         * @summary List Carrier Package Types
         * @param {CarriersApiListPackageTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackageTypes(requestParameters: CarriersApiListPackageTypesRequest, options?: AxiosRequestConfig): AxiosPromise<ListCarrierPackageTypesResponseBody> {
            return localVarFp.listPackageTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the services associated with the carrier ID
         * @summary List Carrier Services
         * @param {CarriersApiListServicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServices(requestParameters: CarriersApiListServicesRequest, options?: AxiosRequestConfig): AxiosPromise<ListCarrierServicesResponseBody> {
            return localVarFp.listServices(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFundsToCarrier operation in CarriersApi.
 * @export
 * @interface CarriersApiAddFundsToCarrierRequest
 */
export type CarriersApiAddFundsToCarrierRequest = {
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarriersApiAddFundsToCarrier
    */
    readonly carrierId: string
    
} & MonetaryValue

/**
 * Request parameters for disconnectById operation in CarriersApi.
 * @export
 * @interface CarriersApiDisconnectByIdRequest
 */
export type CarriersApiDisconnectByIdRequest = {
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarriersApiDisconnectById
    */
    readonly carrierId: string
    
}

/**
 * Request parameters for getById operation in CarriersApi.
 * @export
 * @interface CarriersApiGetByIdRequest
 */
export type CarriersApiGetByIdRequest = {
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarriersApiGetById
    */
    readonly carrierId: string
    
}

/**
 * Request parameters for getOptions operation in CarriersApi.
 * @export
 * @interface CarriersApiGetOptionsRequest
 */
export type CarriersApiGetOptionsRequest = {
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarriersApiGetOptions
    */
    readonly carrierId: string
    
}

/**
 * Request parameters for listPackageTypes operation in CarriersApi.
 * @export
 * @interface CarriersApiListPackageTypesRequest
 */
export type CarriersApiListPackageTypesRequest = {
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarriersApiListPackageTypes
    */
    readonly carrierId: string
    
}

/**
 * Request parameters for listServices operation in CarriersApi.
 * @export
 * @interface CarriersApiListServicesRequest
 */
export type CarriersApiListServicesRequest = {
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarriersApiListServices
    */
    readonly carrierId: string
    
}

/**
 * CarriersApiGenerated - object-oriented interface
 * @export
 * @class CarriersApiGenerated
 * @extends {BaseAPI}
 */
export class CarriersApiGenerated extends BaseAPI {
    /**
     * Add Funds To A Carrier
     * @summary Add Funds To Carrier
     * @param {CarriersApiAddFundsToCarrierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApiGenerated
     */
    public addFundsToCarrier(requestParameters: CarriersApiAddFundsToCarrierRequest, options?: AxiosRequestConfig) {
        return CarriersApiFp(this.configuration).addFundsToCarrier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all carriers that have been added to this account
     * @summary List Carriers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApiGenerated
     */
    public carriers(options?: AxiosRequestConfig) {
        return CarriersApiFp(this.configuration).carriers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disconnect a Carrier of the given ID from the account
     * @summary Disconnect Carrier by ID
     * @param {CarriersApiDisconnectByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApiGenerated
     */
    public disconnectById(requestParameters: CarriersApiDisconnectByIdRequest, options?: AxiosRequestConfig) {
        return CarriersApiFp(this.configuration).disconnectById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrive carrier info by ID
     * @summary Get Carrier By ID
     * @param {CarriersApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApiGenerated
     */
    public getById(requestParameters: CarriersApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CarriersApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the options available for the carrier
     * @summary Get Carrier Options
     * @param {CarriersApiGetOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApiGenerated
     */
    public getOptions(requestParameters: CarriersApiGetOptionsRequest, options?: AxiosRequestConfig) {
        return CarriersApiFp(this.configuration).getOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the package types associated with the carrier
     * @summary List Carrier Package Types
     * @param {CarriersApiListPackageTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApiGenerated
     */
    public listPackageTypes(requestParameters: CarriersApiListPackageTypesRequest, options?: AxiosRequestConfig) {
        return CarriersApiFp(this.configuration).listPackageTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the services associated with the carrier ID
     * @summary List Carrier Services
     * @param {CarriersApiListServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApiGenerated
     */
    public listServices(requestParameters: CarriersApiListServicesRequest, options?: AxiosRequestConfig) {
        return CarriersApiFp(this.configuration).listServices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
