/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AncillaryServiceEndorsement } from '../models';
// @ts-ignore
import { CarrierName } from '../models';
// @ts-ignore
import { CarrierNameWithSettings } from '../models';
// @ts-ignore
import { ConnectCarrierRequestBody } from '../models';
// @ts-ignore
import { ConnectCarrierResponseBody } from '../models';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { GetCarrierSettingsResponseBody } from '../models';
// @ts-ignore
import { SmartPostHub } from '../models';
// @ts-ignore
import { UpdateCarrierSettingsRequestBody } from '../models';
// @ts-ignore
import { UpsInvoice } from '../models';
// @ts-ignore
import { UpsPickupType } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CarrierAccountsApi - axios parameter creator
 * @export
 */
export const CarrierAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Connect a carrier account
         * @summary Connect a carrier account
         * @param {CarrierName} carrierName The carrier name, such as &#x60;stamps_com&#x60;, &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;.
         * @param {ConnectCarrierRequestBody} connectCarrierRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carrier: async (carrierName: CarrierName, connectCarrierRequestBody: ConnectCarrierRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierName' is not null or undefined
            assertParamExists('carrier', 'carrierName', carrierName)
            // verify required parameter 'connectCarrierRequestBody' is not null or undefined
            assertParamExists('carrier', 'connectCarrierRequestBody', connectCarrierRequestBody)
            const localVarPath = `/v1/connections/carriers/{carrier_name}`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrierName !== undefined ? carrierName : `-carrier_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectCarrierRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/connections/carriers/{carrier_name}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectCarrierRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disconnect a carrier
         * @summary Disconnect a carrier
         * @param {CarrierName} carrierName The carrier name, such as &#x60;stamps_com&#x60;, &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;.
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carrier_1: async (carrierName: CarrierName, carrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierName' is not null or undefined
            assertParamExists('carrier_1', 'carrierName', carrierName)
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('carrier_1', 'carrierId', carrierId)
            const localVarPath = `/v1/connections/carriers/{carrier_name}/{carrier_id}`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrierName !== undefined ? carrierName : `-carrier_name-`)))
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/connections/carriers/{carrier_name}/{carrier_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get carrier settings
         * @summary Get carrier settings
         * @param {CarrierNameWithSettings} carrierName The carrier name, such as &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;.
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (carrierName: CarrierNameWithSettings, carrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierName' is not null or undefined
            assertParamExists('getSettings', 'carrierName', carrierName)
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('getSettings', 'carrierId', carrierId)
            const localVarPath = `/v1/connections/carriers/{carrier_name}/{carrier_id}/settings`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrierName !== undefined ? carrierName : `-carrier_name-`)))
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/connections/carriers/{carrier_name}/{carrier_id}/settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update carrier settings
         * @summary Update carrier settings
         * @param {CarrierNameWithSettings} carrierName The carrier name, such as &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;.
         * @param {string} carrierId Carrier ID
         * @param {UpdateCarrierSettingsRequestBody} updateCarrierSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings: async (carrierName: CarrierNameWithSettings, carrierId: string, updateCarrierSettingsRequestBody: UpdateCarrierSettingsRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierName' is not null or undefined
            assertParamExists('updateSettings', 'carrierName', carrierName)
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('updateSettings', 'carrierId', carrierId)
            // verify required parameter 'updateCarrierSettingsRequestBody' is not null or undefined
            assertParamExists('updateSettings', 'updateCarrierSettingsRequestBody', updateCarrierSettingsRequestBody)
            const localVarPath = `/v1/connections/carriers/{carrier_name}/{carrier_id}/settings`
                .replace(`{${"carrier_name"}}`, encodeURIComponent(String(carrierName !== undefined ? carrierName : `-carrier_name-`)))
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId !== undefined ? carrierId : `-carrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateCarrierSettingsRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/connections/carriers/{carrier_name}/{carrier_id}/settings',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateCarrierSettingsRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarrierAccountsApi - functional programming interface
 * @export
 */
export const CarrierAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarrierAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Connect a carrier account
         * @summary Connect a carrier account
         * @param {CarrierAccountsApiCarrierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carrier(requestParameters: CarrierAccountsApiCarrierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectCarrierResponseBody>> {
            const connectCarrierRequestBody: ConnectCarrierRequestBody = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.carrier(requestParameters.carrierName, connectCarrierRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Disconnect a carrier
         * @summary Disconnect a carrier
         * @param {CarrierAccountsApiCarrier0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carrier_1(requestParameters: CarrierAccountsApiCarrier0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carrier_1(requestParameters.carrierName, requestParameters.carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get carrier settings
         * @summary Get carrier settings
         * @param {CarrierAccountsApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: CarrierAccountsApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarrierSettingsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.carrierName, requestParameters.carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update carrier settings
         * @summary Update carrier settings
         * @param {CarrierAccountsApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettings(requestParameters: CarrierAccountsApiUpdateSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const updateCarrierSettingsRequestBody: UpdateCarrierSettingsRequestBody = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettings(requestParameters.carrierName, requestParameters.carrierId, updateCarrierSettingsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CarrierAccountsApi - factory interface
 * @export
 */
export const CarrierAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarrierAccountsApiFp(configuration)
    return {
        /**
         * Connect a carrier account
         * @summary Connect a carrier account
         * @param {CarrierAccountsApiCarrierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carrier(requestParameters: CarrierAccountsApiCarrierRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectCarrierResponseBody> {
            return localVarFp.carrier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Disconnect a carrier
         * @summary Disconnect a carrier
         * @param {CarrierAccountsApiCarrier0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carrier_1(requestParameters: CarrierAccountsApiCarrier0Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.carrier_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get carrier settings
         * @summary Get carrier settings
         * @param {CarrierAccountsApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: CarrierAccountsApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<GetCarrierSettingsResponseBody> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update carrier settings
         * @summary Update carrier settings
         * @param {CarrierAccountsApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(requestParameters: CarrierAccountsApiUpdateSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for carrier operation in CarrierAccountsApi.
 * @export
 * @interface CarrierAccountsApiCarrierRequest
 */
export type CarrierAccountsApiCarrierRequest = {
    
    /**
    * The carrier name, such as `stamps_com`, `ups`, `fedex`, or `dhl_express`.
    * @type {CarrierName}
    * @memberof CarrierAccountsApiCarrier
    */
    readonly carrierName: CarrierName
    
} & ConnectCarrierRequestBody

/**
 * Request parameters for carrier_1 operation in CarrierAccountsApi.
 * @export
 * @interface CarrierAccountsApiCarrier0Request
 */
export type CarrierAccountsApiCarrier0Request = {
    
    /**
    * The carrier name, such as `stamps_com`, `ups`, `fedex`, or `dhl_express`.
    * @type {CarrierName}
    * @memberof CarrierAccountsApiCarrier0
    */
    readonly carrierName: CarrierName
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarrierAccountsApiCarrier0
    */
    readonly carrierId: string
    
}

/**
 * Request parameters for getSettings operation in CarrierAccountsApi.
 * @export
 * @interface CarrierAccountsApiGetSettingsRequest
 */
export type CarrierAccountsApiGetSettingsRequest = {
    
    /**
    * The carrier name, such as `ups`, `fedex`, or `dhl_express`.
    * @type {CarrierNameWithSettings}
    * @memberof CarrierAccountsApiGetSettings
    */
    readonly carrierName: CarrierNameWithSettings
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarrierAccountsApiGetSettings
    */
    readonly carrierId: string
    
}

/**
 * Request parameters for updateSettings operation in CarrierAccountsApi.
 * @export
 * @interface CarrierAccountsApiUpdateSettingsRequest
 */
export type CarrierAccountsApiUpdateSettingsRequest = {
    
    /**
    * The carrier name, such as `ups`, `fedex`, or `dhl_express`.
    * @type {CarrierNameWithSettings}
    * @memberof CarrierAccountsApiUpdateSettings
    */
    readonly carrierName: CarrierNameWithSettings
    
    /**
    * Carrier ID
    * @type {string}
    * @memberof CarrierAccountsApiUpdateSettings
    */
    readonly carrierId: string
    
} & UpdateCarrierSettingsRequestBody

/**
 * CarrierAccountsApiGenerated - object-oriented interface
 * @export
 * @class CarrierAccountsApiGenerated
 * @extends {BaseAPI}
 */
export class CarrierAccountsApiGenerated extends BaseAPI {
    /**
     * Connect a carrier account
     * @summary Connect a carrier account
     * @param {CarrierAccountsApiCarrierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierAccountsApiGenerated
     */
    public carrier(requestParameters: CarrierAccountsApiCarrierRequest, options?: AxiosRequestConfig) {
        return CarrierAccountsApiFp(this.configuration).carrier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disconnect a carrier
     * @summary Disconnect a carrier
     * @param {CarrierAccountsApiCarrier0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierAccountsApiGenerated
     */
    public carrier_1(requestParameters: CarrierAccountsApiCarrier0Request, options?: AxiosRequestConfig) {
        return CarrierAccountsApiFp(this.configuration).carrier_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get carrier settings
     * @summary Get carrier settings
     * @param {CarrierAccountsApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierAccountsApiGenerated
     */
    public getSettings(requestParameters: CarrierAccountsApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return CarrierAccountsApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update carrier settings
     * @summary Update carrier settings
     * @param {CarrierAccountsApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierAccountsApiGenerated
     */
    public updateSettings(requestParameters: CarrierAccountsApiUpdateSettingsRequest, options?: AxiosRequestConfig) {
        return CarrierAccountsApiFp(this.configuration).updateSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
