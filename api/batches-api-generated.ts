/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Batch } from '../models';
// @ts-ignore
import { BatchStatus } from '../models';
// @ts-ignore
import { BatchesSortBy } from '../models';
// @ts-ignore
import { CreateAndProcessBatchRequestBodyProcessLabels } from '../models';
// @ts-ignore
import { CreateBatchRequest } from '../models';
// @ts-ignore
import { DisplayScheme } from '../models';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { LabelFormat } from '../models';
// @ts-ignore
import { LabelLayout } from '../models';
// @ts-ignore
import { ListBatchErrorsResponseBody } from '../models';
// @ts-ignore
import { ListBatchesResponseBody } from '../models';
// @ts-ignore
import { ModifyBatch } from '../models';
// @ts-ignore
import { ProcessBatchRequestBody } from '../models';
// @ts-ignore
import { SortDir } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BatchesApi - axios parameter creator
 * @export
 */
export const BatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a Shipment or Rate to a Batch
         * @summary Add to a Batch
         * @param {string} batchId Batch ID
         * @param {ModifyBatch} modifyBatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToBatch: async (batchId: string, modifyBatch: ModifyBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('addToBatch', 'batchId', batchId)
            // verify required parameter 'modifyBatch' is not null or undefined
            assertParamExists('addToBatch', 'modifyBatch', modifyBatch)
            const localVarPath = `/v1/batches/{batch_id}/add`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modifyBatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/{batch_id}/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modifyBatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Batch
         * @summary Create A Batch
         * @param {CreateBatchRequest} createBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch: async (createBatchRequest: CreateBatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBatchRequest' is not null or undefined
            assertParamExists('batch', 'createBatchRequest', createBatchRequest)
            const localVarPath = `/v1/batches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createBatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createBatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Batch By Id
         * @summary Update Batch By Id
         * @param {string} batchId Batch ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch_1: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('batch_1', 'batchId', batchId)
            const localVarPath = `/v1/batches/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/{batch_id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Batch By Id
         * @summary Delete Batch By Id
         * @param {string} batchId Batch ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch_2: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('batch_2', 'batchId', batchId)
            const localVarPath = `/v1/batches/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/{batch_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Process Batch ID Labels
         * @summary Process Batch ID Labels
         * @param {string} batchId Batch ID
         * @param {ProcessBatchRequestBody} processBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch_3: async (batchId: string, processBatchRequestBody: ProcessBatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('batch_3', 'batchId', batchId)
            // verify required parameter 'processBatchRequestBody' is not null or undefined
            assertParamExists('batch_3', 'processBatchRequestBody', processBatchRequestBody)
            const localVarPath = `/v1/batches/{batch_id}/process/labels`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: processBatchRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/{batch_id}/process/labels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(processBatchRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Batches associated with your Shipengine account
         * @summary List Batches
         * @param {BatchStatus} [status] 
         * @param {number} [page] Return a specific page of results. Defaults to the first page. If set to a number that\&#39;s greater than the number of pages of results, an empty page is returned. 
         * @param {number} [pageSize] The number of results to return per response.
         * @param {SortDir} [sortDir] Controls the sort order of the query.
         * @param {string} [batchNumber] Batch Number
         * @param {BatchesSortBy} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batches: async (status?: BatchStatus, page?: number, pageSize?: number, sortDir?: SortDir, batchNumber?: string, sortBy?: BatchesSortBy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/batches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }

            if (batchNumber !== undefined) {
                localVarQueryParameter['batch_number'] = batchNumber;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Batch By External ID
         * @summary Get Batch By External ID
         * @param {string} externalBatchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByExternalId: async (externalBatchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalBatchId' is not null or undefined
            assertParamExists('getByExternalId', 'externalBatchId', externalBatchId)
            const localVarPath = `/v1/batches/external_batch_id/{external_batch_id}`
                .replace(`{${"external_batch_id"}}`, encodeURIComponent(String(externalBatchId !== undefined ? externalBatchId : `-external_batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/external_batch_id/{external_batch_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Batch By ID
         * @summary Get Batch By ID
         * @param {string} batchId Batch ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('getById', 'batchId', batchId)
            const localVarPath = `/v1/batches/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/{batch_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
         * @summary Get Batch Errors
         * @param {string} batchId Batch ID
         * @param {number} [page] Return a specific page of results. Defaults to the first page. If set to a number that\&#39;s greater than the number of pages of results, an empty page is returned. 
         * @param {number} [pagesize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrors: async (batchId: string, page?: number, pagesize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('getErrors', 'batchId', batchId)
            const localVarPath = `/v1/batches/{batch_id}/errors`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/{batch_id}/errors',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a shipment or rate from a batch
         * @summary Remove From Batch
         * @param {string} batchId Batch ID
         * @param {ModifyBatch} modifyBatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromBatch: async (batchId: string, modifyBatch: ModifyBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('removeFromBatch', 'batchId', batchId)
            // verify required parameter 'modifyBatch' is not null or undefined
            assertParamExists('removeFromBatch', 'modifyBatch', modifyBatch)
            const localVarPath = `/v1/batches/{batch_id}/remove`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modifyBatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/batches/{batch_id}/remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modifyBatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchesApi - functional programming interface
 * @export
 */
export const BatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a Shipment or Rate to a Batch
         * @summary Add to a Batch
         * @param {BatchesApiAddToBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToBatch(requestParameters: BatchesApiAddToBatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const modifyBatch: ModifyBatch = {
                shipment_ids: requestParameters.shipment_ids,
                rate_ids: requestParameters.rate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToBatch(requestParameters.batchId, modifyBatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Batch
         * @summary Create A Batch
         * @param {BatchesApiBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batch(requestParameters: BatchesApiBatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Batch>> {
            const createBatchRequest: CreateBatchRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.batch(createBatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Batch By Id
         * @summary Update Batch By Id
         * @param {BatchesApiBatch0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batch_1(requestParameters: BatchesApiBatch0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batch_1(requestParameters.batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Batch By Id
         * @summary Delete Batch By Id
         * @param {BatchesApiBatch1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batch_2(requestParameters: BatchesApiBatch1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batch_2(requestParameters.batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Process Batch ID Labels
         * @summary Process Batch ID Labels
         * @param {BatchesApiBatch2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batch_3(requestParameters: BatchesApiBatch2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const processBatchRequestBody: ProcessBatchRequestBody = {
                ship_date: requestParameters.ship_date,
                label_layout: requestParameters.label_layout,
                label_format: requestParameters.label_format,
                display_scheme: requestParameters.display_scheme
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.batch_3(requestParameters.batchId, processBatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Batches associated with your Shipengine account
         * @summary List Batches
         * @param {BatchesApiBatchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batches(requestParameters: BatchesApiBatchesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBatchesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batches(requestParameters.status, requestParameters.page, requestParameters.pageSize, requestParameters.sortDir, requestParameters.batchNumber, requestParameters.sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Batch By External ID
         * @summary Get Batch By External ID
         * @param {BatchesApiGetByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByExternalId(requestParameters: BatchesApiGetByExternalIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Batch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByExternalId(requestParameters.externalBatchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Batch By ID
         * @summary Get Batch By ID
         * @param {BatchesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: BatchesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Batch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
         * @summary Get Batch Errors
         * @param {BatchesApiGetErrorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErrors(requestParameters: BatchesApiGetErrorsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBatchErrorsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getErrors(requestParameters.batchId, requestParameters.page, requestParameters.pagesize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a shipment or rate from a batch
         * @summary Remove From Batch
         * @param {BatchesApiRemoveFromBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromBatch(requestParameters: BatchesApiRemoveFromBatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const modifyBatch: ModifyBatch = {
                shipment_ids: requestParameters.shipment_ids,
                rate_ids: requestParameters.rate_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromBatch(requestParameters.batchId, modifyBatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchesApi - factory interface
 * @export
 */
export const BatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchesApiFp(configuration)
    return {
        /**
         * Add a Shipment or Rate to a Batch
         * @summary Add to a Batch
         * @param {BatchesApiAddToBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToBatch(requestParameters: BatchesApiAddToBatchRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.addToBatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Batch
         * @summary Create A Batch
         * @param {BatchesApiBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch(requestParameters: BatchesApiBatchRequest, options?: AxiosRequestConfig): AxiosPromise<Batch> {
            return localVarFp.batch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Batch By Id
         * @summary Update Batch By Id
         * @param {BatchesApiBatch0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch_1(requestParameters: BatchesApiBatch0Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.batch_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Batch By Id
         * @summary Delete Batch By Id
         * @param {BatchesApiBatch1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch_2(requestParameters: BatchesApiBatch1Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.batch_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Process Batch ID Labels
         * @summary Process Batch ID Labels
         * @param {BatchesApiBatch2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batch_3(requestParameters: BatchesApiBatch2Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.batch_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List Batches associated with your Shipengine account
         * @summary List Batches
         * @param {BatchesApiBatchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batches(requestParameters: BatchesApiBatchesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListBatchesResponseBody> {
            return localVarFp.batches(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Batch By External ID
         * @summary Get Batch By External ID
         * @param {BatchesApiGetByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByExternalId(requestParameters: BatchesApiGetByExternalIdRequest, options?: AxiosRequestConfig): AxiosPromise<Batch> {
            return localVarFp.getByExternalId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Batch By ID
         * @summary Get Batch By ID
         * @param {BatchesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: BatchesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Batch> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
         * @summary Get Batch Errors
         * @param {BatchesApiGetErrorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrors(requestParameters: BatchesApiGetErrorsRequest, options?: AxiosRequestConfig): AxiosPromise<ListBatchErrorsResponseBody> {
            return localVarFp.getErrors(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a shipment or rate from a batch
         * @summary Remove From Batch
         * @param {BatchesApiRemoveFromBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromBatch(requestParameters: BatchesApiRemoveFromBatchRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.removeFromBatch(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToBatch operation in BatchesApi.
 * @export
 * @interface BatchesApiAddToBatchRequest
 */
export type BatchesApiAddToBatchRequest = {
    
    /**
    * Batch ID
    * @type {string}
    * @memberof BatchesApiAddToBatch
    */
    readonly batchId: string
    
} & ModifyBatch

/**
 * Request parameters for batch operation in BatchesApi.
 * @export
 * @interface BatchesApiBatchRequest
 */
export type BatchesApiBatchRequest = {
    
} & CreateBatchRequest

/**
 * Request parameters for batch_1 operation in BatchesApi.
 * @export
 * @interface BatchesApiBatch0Request
 */
export type BatchesApiBatch0Request = {
    
    /**
    * Batch ID
    * @type {string}
    * @memberof BatchesApiBatch0
    */
    readonly batchId: string
    
}

/**
 * Request parameters for batch_2 operation in BatchesApi.
 * @export
 * @interface BatchesApiBatch1Request
 */
export type BatchesApiBatch1Request = {
    
    /**
    * Batch ID
    * @type {string}
    * @memberof BatchesApiBatch1
    */
    readonly batchId: string
    
}

/**
 * Request parameters for batch_3 operation in BatchesApi.
 * @export
 * @interface BatchesApiBatch2Request
 */
export type BatchesApiBatch2Request = {
    
    /**
    * Batch ID
    * @type {string}
    * @memberof BatchesApiBatch2
    */
    readonly batchId: string
    
} & ProcessBatchRequestBody

/**
 * Request parameters for batches operation in BatchesApi.
 * @export
 * @interface BatchesApiBatchesRequest
 */
export type BatchesApiBatchesRequest = {
    
    /**
    * 
    * @type {BatchStatus}
    * @memberof BatchesApiBatches
    */
    readonly status?: BatchStatus
    
    /**
    * Return a specific page of results. Defaults to the first page. If set to a number that\'s greater than the number of pages of results, an empty page is returned. 
    * @type {number}
    * @memberof BatchesApiBatches
    */
    readonly page?: number
    
    /**
    * The number of results to return per response.
    * @type {number}
    * @memberof BatchesApiBatches
    */
    readonly pageSize?: number
    
    /**
    * Controls the sort order of the query.
    * @type {SortDir}
    * @memberof BatchesApiBatches
    */
    readonly sortDir?: SortDir
    
    /**
    * Batch Number
    * @type {string}
    * @memberof BatchesApiBatches
    */
    readonly batchNumber?: string
    
    /**
    * 
    * @type {BatchesSortBy}
    * @memberof BatchesApiBatches
    */
    readonly sortBy?: BatchesSortBy
    
}

/**
 * Request parameters for getByExternalId operation in BatchesApi.
 * @export
 * @interface BatchesApiGetByExternalIdRequest
 */
export type BatchesApiGetByExternalIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BatchesApiGetByExternalId
    */
    readonly externalBatchId: string
    
}

/**
 * Request parameters for getById operation in BatchesApi.
 * @export
 * @interface BatchesApiGetByIdRequest
 */
export type BatchesApiGetByIdRequest = {
    
    /**
    * Batch ID
    * @type {string}
    * @memberof BatchesApiGetById
    */
    readonly batchId: string
    
}

/**
 * Request parameters for getErrors operation in BatchesApi.
 * @export
 * @interface BatchesApiGetErrorsRequest
 */
export type BatchesApiGetErrorsRequest = {
    
    /**
    * Batch ID
    * @type {string}
    * @memberof BatchesApiGetErrors
    */
    readonly batchId: string
    
    /**
    * Return a specific page of results. Defaults to the first page. If set to a number that\'s greater than the number of pages of results, an empty page is returned. 
    * @type {number}
    * @memberof BatchesApiGetErrors
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof BatchesApiGetErrors
    */
    readonly pagesize?: number
    
}

/**
 * Request parameters for removeFromBatch operation in BatchesApi.
 * @export
 * @interface BatchesApiRemoveFromBatchRequest
 */
export type BatchesApiRemoveFromBatchRequest = {
    
    /**
    * Batch ID
    * @type {string}
    * @memberof BatchesApiRemoveFromBatch
    */
    readonly batchId: string
    
} & ModifyBatch

/**
 * BatchesApiGenerated - object-oriented interface
 * @export
 * @class BatchesApiGenerated
 * @extends {BaseAPI}
 */
export class BatchesApiGenerated extends BaseAPI {
    /**
     * Add a Shipment or Rate to a Batch
     * @summary Add to a Batch
     * @param {BatchesApiAddToBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public addToBatch(requestParameters: BatchesApiAddToBatchRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).addToBatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Batch
     * @summary Create A Batch
     * @param {BatchesApiBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public batch(requestParameters: BatchesApiBatchRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).batch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Batch By Id
     * @summary Update Batch By Id
     * @param {BatchesApiBatch0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public batch_1(requestParameters: BatchesApiBatch0Request, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).batch_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Batch By Id
     * @summary Delete Batch By Id
     * @param {BatchesApiBatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public batch_2(requestParameters: BatchesApiBatch1Request, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).batch_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Process Batch ID Labels
     * @summary Process Batch ID Labels
     * @param {BatchesApiBatch2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public batch_3(requestParameters: BatchesApiBatch2Request, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).batch_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Batches associated with your Shipengine account
     * @summary List Batches
     * @param {BatchesApiBatchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public batches(requestParameters: BatchesApiBatchesRequest = {}, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).batches(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Batch By External ID
     * @summary Get Batch By External ID
     * @param {BatchesApiGetByExternalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public getByExternalId(requestParameters: BatchesApiGetByExternalIdRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).getByExternalId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Batch By ID
     * @summary Get Batch By ID
     * @param {BatchesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public getById(requestParameters: BatchesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
     * @summary Get Batch Errors
     * @param {BatchesApiGetErrorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public getErrors(requestParameters: BatchesApiGetErrorsRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).getErrors(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a shipment or rate from a batch
     * @summary Remove From Batch
     * @param {BatchesApiRemoveFromBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public removeFromBatch(requestParameters: BatchesApiRemoveFromBatchRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).removeFromBatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
