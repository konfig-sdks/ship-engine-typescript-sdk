/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConnectInsurerRequestBody } from '../models';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { MonetaryValue } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InsuranceApi - axios parameter creator
 * @export
 */
export const InsuranceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You may need to auto fund your account from time to time. For example, if you don\'t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
         * @summary Add Funds To Insurance
         * @param {MonetaryValue} monetaryValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoFundAccount: async (monetaryValue: MonetaryValue, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'monetaryValue' is not null or undefined
            assertParamExists('autoFundAccount', 'monetaryValue', monetaryValue)
            const localVarPath = `/v1/insurance/shipsurance/add_funds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: monetaryValue,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/insurance/shipsurance/add_funds',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(monetaryValue, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the balance of your Shipsurance account.
         * @summary Get Insurance Funds Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundsBalance: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/insurance/shipsurance/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/insurance/shipsurance/balance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect a Shipsurance Account
         * @summary Connect a Shipsurance Account
         * @param {ConnectInsurerRequestBody} connectInsurerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurer: async (connectInsurerRequestBody: ConnectInsurerRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectInsurerRequestBody' is not null or undefined
            assertParamExists('insurer', 'connectInsurerRequestBody', connectInsurerRequestBody)
            const localVarPath = `/v1/connections/insurance/shipsurance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectInsurerRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/connections/insurance/shipsurance',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectInsurerRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disconnect a Shipsurance Account
         * @summary Disconnect a Shipsurance Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurer_1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/connections/insurance/shipsurance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/connections/insurance/shipsurance',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsuranceApi - functional programming interface
 * @export
 */
export const InsuranceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsuranceApiAxiosParamCreator(configuration)
    return {
        /**
         * You may need to auto fund your account from time to time. For example, if you don\'t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
         * @summary Add Funds To Insurance
         * @param {InsuranceApiAutoFundAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autoFundAccount(requestParameters: InsuranceApiAutoFundAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonetaryValue>> {
            const monetaryValue: MonetaryValue = {
                currency: requestParameters.currency,
                amount: requestParameters.amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.autoFundAccount(monetaryValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the balance of your Shipsurance account.
         * @summary Get Insurance Funds Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundsBalance(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonetaryValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundsBalance(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Connect a Shipsurance Account
         * @summary Connect a Shipsurance Account
         * @param {InsuranceApiInsurerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insurer(requestParameters: InsuranceApiInsurerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const connectInsurerRequestBody: ConnectInsurerRequestBody = {
                email: requestParameters.email,
                policy_id: requestParameters.policy_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.insurer(connectInsurerRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Disconnect a Shipsurance Account
         * @summary Disconnect a Shipsurance Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insurer_1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insurer_1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsuranceApi - factory interface
 * @export
 */
export const InsuranceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsuranceApiFp(configuration)
    return {
        /**
         * You may need to auto fund your account from time to time. For example, if you don\'t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
         * @summary Add Funds To Insurance
         * @param {InsuranceApiAutoFundAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoFundAccount(requestParameters: InsuranceApiAutoFundAccountRequest, options?: AxiosRequestConfig): AxiosPromise<MonetaryValue> {
            return localVarFp.autoFundAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the balance of your Shipsurance account.
         * @summary Get Insurance Funds Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundsBalance(options?: AxiosRequestConfig): AxiosPromise<MonetaryValue> {
            return localVarFp.getFundsBalance(options).then((request) => request(axios, basePath));
        },
        /**
         * Connect a Shipsurance Account
         * @summary Connect a Shipsurance Account
         * @param {InsuranceApiInsurerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurer(requestParameters: InsuranceApiInsurerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.insurer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Disconnect a Shipsurance Account
         * @summary Disconnect a Shipsurance Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insurer_1(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.insurer_1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for autoFundAccount operation in InsuranceApi.
 * @export
 * @interface InsuranceApiAutoFundAccountRequest
 */
export type InsuranceApiAutoFundAccountRequest = {
    
} & MonetaryValue

/**
 * Request parameters for insurer operation in InsuranceApi.
 * @export
 * @interface InsuranceApiInsurerRequest
 */
export type InsuranceApiInsurerRequest = {
    
} & ConnectInsurerRequestBody

/**
 * InsuranceApiGenerated - object-oriented interface
 * @export
 * @class InsuranceApiGenerated
 * @extends {BaseAPI}
 */
export class InsuranceApiGenerated extends BaseAPI {
    /**
     * You may need to auto fund your account from time to time. For example, if you don\'t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
     * @summary Add Funds To Insurance
     * @param {InsuranceApiAutoFundAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceApiGenerated
     */
    public autoFundAccount(requestParameters: InsuranceApiAutoFundAccountRequest, options?: AxiosRequestConfig) {
        return InsuranceApiFp(this.configuration).autoFundAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the balance of your Shipsurance account.
     * @summary Get Insurance Funds Balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceApiGenerated
     */
    public getFundsBalance(options?: AxiosRequestConfig) {
        return InsuranceApiFp(this.configuration).getFundsBalance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect a Shipsurance Account
     * @summary Connect a Shipsurance Account
     * @param {InsuranceApiInsurerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceApiGenerated
     */
    public insurer(requestParameters: InsuranceApiInsurerRequest, options?: AxiosRequestConfig) {
        return InsuranceApiFp(this.configuration).insurer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disconnect a Shipsurance Account
     * @summary Disconnect a Shipsurance Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceApiGenerated
     */
    public insurer_1(options?: AxiosRequestConfig) {
        return InsuranceApiFp(this.configuration).insurer_1(options).then((request) => request(this.axios, this.basePath));
    }
}
