/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { ListWarehousesResponseBody } from '../models';
// @ts-ignore
import { PartialAddress } from '../models';
// @ts-ignore
import { UpdateWarehouseSettingsRequestBody } from '../models';
// @ts-ignore
import { Warehouse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WarehousesApi - axios parameter creator
 * @export
 */
export const WarehousesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve warehouse data based on the warehouse ID
         * @summary Get Warehouse By Id
         * @param {string} warehouseId Warehouse ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (warehouseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('getById', 'warehouseId', warehouseId)
            const localVarPath = `/v1/warehouses/{warehouse_id}`
                .replace(`{${"warehouse_id"}}`, encodeURIComponent(String(warehouseId !== undefined ? warehouseId : `-warehouse_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/warehouses/{warehouse_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Warehouse settings object information
         * @summary Update Warehouse Settings
         * @param {string} warehouseId Warehouse ID
         * @param {UpdateWarehouseSettingsRequestBody} updateWarehouseSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings: async (warehouseId: string, updateWarehouseSettingsRequestBody: UpdateWarehouseSettingsRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('updateSettings', 'warehouseId', warehouseId)
            // verify required parameter 'updateWarehouseSettingsRequestBody' is not null or undefined
            assertParamExists('updateSettings', 'updateWarehouseSettingsRequestBody', updateWarehouseSettingsRequestBody)
            const localVarPath = `/v1/warehouses/{warehouse_id}/settings`
                .replace(`{${"warehouse_id"}}`, encodeURIComponent(String(warehouseId !== undefined ? warehouseId : `-warehouse_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateWarehouseSettingsRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/warehouses/{warehouse_id}/settings',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateWarehouseSettingsRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
         * @summary Create Warehouse
         * @param {Warehouse} warehouse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouse: async (warehouse: Warehouse, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouse' is not null or undefined
            assertParamExists('warehouse', 'warehouse', warehouse)
            const localVarPath = `/v1/warehouses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: warehouse,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/warehouses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(warehouse, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Warehouse object information
         * @summary Update Warehouse By Id
         * @param {string} warehouseId Warehouse ID
         * @param {Warehouse} warehouse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouse_1: async (warehouseId: string, warehouse: Warehouse, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('warehouse_1', 'warehouseId', warehouseId)
            // verify required parameter 'warehouse' is not null or undefined
            assertParamExists('warehouse_1', 'warehouse', warehouse)
            const localVarPath = `/v1/warehouses/{warehouse_id}`
                .replace(`{${"warehouse_id"}}`, encodeURIComponent(String(warehouseId !== undefined ? warehouseId : `-warehouse_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: warehouse,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/warehouses/{warehouse_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(warehouse, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a warehouse by ID
         * @summary Delete Warehouse By ID
         * @param {string} warehouseId Warehouse ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouse_2: async (warehouseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('warehouse_2', 'warehouseId', warehouseId)
            const localVarPath = `/v1/warehouses/{warehouse_id}`
                .replace(`{${"warehouse_id"}}`, encodeURIComponent(String(warehouseId !== undefined ? warehouseId : `-warehouse_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/warehouses/{warehouse_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of warehouses associated with this account.
         * @summary List Warehouses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/warehouses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/warehouses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WarehousesApi - functional programming interface
 * @export
 */
export const WarehousesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WarehousesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve warehouse data based on the warehouse ID
         * @summary Get Warehouse By Id
         * @param {WarehousesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: WarehousesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Warehouse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.warehouseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Warehouse settings object information
         * @summary Update Warehouse Settings
         * @param {WarehousesApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettings(requestParameters: WarehousesApiUpdateSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const updateWarehouseSettingsRequestBody: UpdateWarehouseSettingsRequestBody = {
                is_default: requestParameters.is_default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettings(requestParameters.warehouseId, updateWarehouseSettingsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
         * @summary Create Warehouse
         * @param {WarehousesApiWarehouseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warehouse(requestParameters: WarehousesApiWarehouseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Warehouse>> {
            const warehouse: Warehouse = {
                warehouse_id: requestParameters.warehouse_id,
                is_default: requestParameters.is_default,
                name: requestParameters.name,
                created_at: requestParameters.created_at,
                origin_address: requestParameters.origin_address,
                return_address: requestParameters.return_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.warehouse(warehouse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Warehouse object information
         * @summary Update Warehouse By Id
         * @param {WarehousesApiWarehouse0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warehouse_1(requestParameters: WarehousesApiWarehouse0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const warehouse: Warehouse = {
                warehouse_id: requestParameters.warehouse_id,
                is_default: requestParameters.is_default,
                name: requestParameters.name,
                created_at: requestParameters.created_at,
                origin_address: requestParameters.origin_address,
                return_address: requestParameters.return_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.warehouse_1(requestParameters.warehouseId, warehouse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a warehouse by ID
         * @summary Delete Warehouse By ID
         * @param {WarehousesApiWarehouse1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warehouse_2(requestParameters: WarehousesApiWarehouse1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.warehouse_2(requestParameters.warehouseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of warehouses associated with this account.
         * @summary List Warehouses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warehouses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWarehousesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.warehouses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WarehousesApi - factory interface
 * @export
 */
export const WarehousesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WarehousesApiFp(configuration)
    return {
        /**
         * Retrieve warehouse data based on the warehouse ID
         * @summary Get Warehouse By Id
         * @param {WarehousesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: WarehousesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Warehouse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Warehouse settings object information
         * @summary Update Warehouse Settings
         * @param {WarehousesApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(requestParameters: WarehousesApiUpdateSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
         * @summary Create Warehouse
         * @param {WarehousesApiWarehouseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouse(requestParameters: WarehousesApiWarehouseRequest, options?: AxiosRequestConfig): AxiosPromise<Warehouse> {
            return localVarFp.warehouse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Warehouse object information
         * @summary Update Warehouse By Id
         * @param {WarehousesApiWarehouse0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouse_1(requestParameters: WarehousesApiWarehouse0Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.warehouse_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a warehouse by ID
         * @summary Delete Warehouse By ID
         * @param {WarehousesApiWarehouse1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouse_2(requestParameters: WarehousesApiWarehouse1Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.warehouse_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of warehouses associated with this account.
         * @summary List Warehouses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouses(options?: AxiosRequestConfig): AxiosPromise<ListWarehousesResponseBody> {
            return localVarFp.warehouses(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in WarehousesApi.
 * @export
 * @interface WarehousesApiGetByIdRequest
 */
export type WarehousesApiGetByIdRequest = {
    
    /**
    * Warehouse ID
    * @type {string}
    * @memberof WarehousesApiGetById
    */
    readonly warehouseId: string
    
}

/**
 * Request parameters for updateSettings operation in WarehousesApi.
 * @export
 * @interface WarehousesApiUpdateSettingsRequest
 */
export type WarehousesApiUpdateSettingsRequest = {
    
    /**
    * Warehouse ID
    * @type {string}
    * @memberof WarehousesApiUpdateSettings
    */
    readonly warehouseId: string
    
} & UpdateWarehouseSettingsRequestBody

/**
 * Request parameters for warehouse operation in WarehousesApi.
 * @export
 * @interface WarehousesApiWarehouseRequest
 */
export type WarehousesApiWarehouseRequest = {
    
} & Warehouse

/**
 * Request parameters for warehouse_1 operation in WarehousesApi.
 * @export
 * @interface WarehousesApiWarehouse0Request
 */
export type WarehousesApiWarehouse0Request = {
    
    /**
    * Warehouse ID
    * @type {string}
    * @memberof WarehousesApiWarehouse0
    */
    readonly warehouseId: string
    
} & Warehouse

/**
 * Request parameters for warehouse_2 operation in WarehousesApi.
 * @export
 * @interface WarehousesApiWarehouse1Request
 */
export type WarehousesApiWarehouse1Request = {
    
    /**
    * Warehouse ID
    * @type {string}
    * @memberof WarehousesApiWarehouse1
    */
    readonly warehouseId: string
    
}

/**
 * WarehousesApiGenerated - object-oriented interface
 * @export
 * @class WarehousesApiGenerated
 * @extends {BaseAPI}
 */
export class WarehousesApiGenerated extends BaseAPI {
    /**
     * Retrieve warehouse data based on the warehouse ID
     * @summary Get Warehouse By Id
     * @param {WarehousesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApiGenerated
     */
    public getById(requestParameters: WarehousesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Warehouse settings object information
     * @summary Update Warehouse Settings
     * @param {WarehousesApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApiGenerated
     */
    public updateSettings(requestParameters: WarehousesApiUpdateSettingsRequest, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).updateSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
     * @summary Create Warehouse
     * @param {WarehousesApiWarehouseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApiGenerated
     */
    public warehouse(requestParameters: WarehousesApiWarehouseRequest, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).warehouse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Warehouse object information
     * @summary Update Warehouse By Id
     * @param {WarehousesApiWarehouse0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApiGenerated
     */
    public warehouse_1(requestParameters: WarehousesApiWarehouse0Request, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).warehouse_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a warehouse by ID
     * @summary Delete Warehouse By ID
     * @param {WarehousesApiWarehouse1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApiGenerated
     */
    public warehouse_2(requestParameters: WarehousesApiWarehouse1Request, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).warehouse_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of warehouses associated with this account.
     * @summary List Warehouses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApiGenerated
     */
    public warehouses(options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).warehouses(options).then((request) => request(this.axios, this.basePath));
    }
}
