/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountSettings } from '../models';
// @ts-ignore
import { AccountSettingsImages } from '../models';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { PagedListResponseBody } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an Account Image
         * @summary Create an Account Image
         * @param {AccountSettingsImages} accountSettingsImages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImage: async (accountSettingsImages: AccountSettingsImages, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountSettingsImages' is not null or undefined
            assertParamExists('createImage', 'accountSettingsImages', accountSettingsImages)
            const localVarPath = `/v1/account/settings/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountSettingsImages,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/account/settings/images',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountSettingsImages, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Account Image By Id
         * @summary Delete Account Image By Id
         * @param {string} labelImageId Label Image Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageById: async (labelImageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labelImageId' is not null or undefined
            assertParamExists('deleteImageById', 'labelImageId', labelImageId)
            const localVarPath = `/v1/account/settings/images/{label_image_id}`
                .replace(`{${"label_image_id"}}`, encodeURIComponent(String(labelImageId !== undefined ? labelImageId : `-label_image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/account/settings/images/{label_image_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information for an account image.
         * @summary Get Account Image By ID
         * @param {string} labelImageId Label Image Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById: async (labelImageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labelImageId' is not null or undefined
            assertParamExists('getImageById', 'labelImageId', labelImageId)
            const localVarPath = `/v1/account/settings/images/{label_image_id}`
                .replace(`{${"label_image_id"}}`, encodeURIComponent(String(labelImageId !== undefined ? labelImageId : `-label_image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/account/settings/images/{label_image_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all account images for the ShipEngine account
         * @summary List Account Images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/account/settings/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/account/settings/images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all account settings for the ShipEngine account
         * @summary List Account Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/account/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/account/settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update information for an account image.
         * @summary Update Account Image By ID
         * @param {string} labelImageId Label Image Id
         * @param {AccountSettingsImages} accountSettingsImages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImageById: async (labelImageId: string, accountSettingsImages: AccountSettingsImages, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labelImageId' is not null or undefined
            assertParamExists('updateImageById', 'labelImageId', labelImageId)
            // verify required parameter 'accountSettingsImages' is not null or undefined
            assertParamExists('updateImageById', 'accountSettingsImages', accountSettingsImages)
            const localVarPath = `/v1/account/settings/images/{label_image_id}`
                .replace(`{${"label_image_id"}}`, encodeURIComponent(String(labelImageId !== undefined ? labelImageId : `-label_image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountSettingsImages,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/account/settings/images/{label_image_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountSettingsImages, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an Account Image
         * @summary Create an Account Image
         * @param {AccountApiCreateImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImage(requestParameters: AccountApiCreateImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountSettingsImages>> {
            const accountSettingsImages: AccountSettingsImages = {
                label_image_id: requestParameters.label_image_id,
                name: requestParameters.name,
                is_default: requestParameters.is_default,
                image_content_type: requestParameters.image_content_type,
                image_data: requestParameters.image_data,
                created_at: requestParameters.created_at,
                modified_at: requestParameters.modified_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(accountSettingsImages, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Account Image By Id
         * @summary Delete Account Image By Id
         * @param {AccountApiDeleteImageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImageById(requestParameters: AccountApiDeleteImageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImageById(requestParameters.labelImageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information for an account image.
         * @summary Get Account Image By ID
         * @param {AccountApiGetImageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageById(requestParameters: AccountApiGetImageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountSettingsImages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageById(requestParameters.labelImageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all account images for the ShipEngine account
         * @summary List Account Images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listImages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedListResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all account settings for the ShipEngine account
         * @summary List Account Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update information for an account image.
         * @summary Update Account Image By ID
         * @param {AccountApiUpdateImageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImageById(requestParameters: AccountApiUpdateImageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const accountSettingsImages: AccountSettingsImages = {
                label_image_id: requestParameters.requestBody.label_image_id,
                name: requestParameters.requestBody.name,
                is_default: requestParameters.requestBody.is_default,
                image_content_type: requestParameters.requestBody.image_content_type,
                image_data: requestParameters.requestBody.image_data,
                created_at: requestParameters.requestBody.created_at,
                modified_at: requestParameters.requestBody.modified_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImageById(requestParameters.labelImageId, accountSettingsImages, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Create an Account Image
         * @summary Create an Account Image
         * @param {AccountApiCreateImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImage(requestParameters: AccountApiCreateImageRequest, options?: AxiosRequestConfig): AxiosPromise<AccountSettingsImages> {
            return localVarFp.createImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Account Image By Id
         * @summary Delete Account Image By Id
         * @param {AccountApiDeleteImageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageById(requestParameters: AccountApiDeleteImageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteImageById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information for an account image.
         * @summary Get Account Image By ID
         * @param {AccountApiGetImageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById(requestParameters: AccountApiGetImageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AccountSettingsImages> {
            return localVarFp.getImageById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all account images for the ShipEngine account
         * @summary List Account Images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImages(options?: AxiosRequestConfig): AxiosPromise<PagedListResponseBody> {
            return localVarFp.listImages(options).then((request) => request(axios, basePath));
        },
        /**
         * List all account settings for the ShipEngine account
         * @summary List Account Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSettings(options?: AxiosRequestConfig): AxiosPromise<AccountSettings> {
            return localVarFp.listSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Update information for an account image.
         * @summary Update Account Image By ID
         * @param {AccountApiUpdateImageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImageById(requestParameters: AccountApiUpdateImageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateImageById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createImage operation in AccountApi.
 * @export
 * @interface AccountApiCreateImageRequest
 */
export type AccountApiCreateImageRequest = {
    
} & AccountSettingsImages

/**
 * Request parameters for deleteImageById operation in AccountApi.
 * @export
 * @interface AccountApiDeleteImageByIdRequest
 */
export type AccountApiDeleteImageByIdRequest = {
    
    /**
    * Label Image Id
    * @type {string}
    * @memberof AccountApiDeleteImageById
    */
    readonly labelImageId: string
    
}

/**
 * Request parameters for getImageById operation in AccountApi.
 * @export
 * @interface AccountApiGetImageByIdRequest
 */
export type AccountApiGetImageByIdRequest = {
    
    /**
    * Label Image Id
    * @type {string}
    * @memberof AccountApiGetImageById
    */
    readonly labelImageId: string
    
}

/**
 * Request parameters for updateImageById operation in AccountApi.
 * @export
 * @interface AccountApiUpdateImageByIdRequest
 */
export type AccountApiUpdateImageByIdRequest = {
    /**
    * Label Image Id
    * @type {string}
    * @memberof AccountApiUpdateImageById
    */
    readonly labelImageId: string
    /**
    * 
    * @type {AccountSettingsImages}
    * @memberof AccountApiUpdateImageById
    */
    readonly requestBody: AccountSettingsImages
}

/**
 * AccountApiGenerated - object-oriented interface
 * @export
 * @class AccountApiGenerated
 * @extends {BaseAPI}
 */
export class AccountApiGenerated extends BaseAPI {
    /**
     * Create an Account Image
     * @summary Create an Account Image
     * @param {AccountApiCreateImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createImage(requestParameters: AccountApiCreateImageRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Account Image By Id
     * @summary Delete Account Image By Id
     * @param {AccountApiDeleteImageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public deleteImageById(requestParameters: AccountApiDeleteImageByIdRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).deleteImageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information for an account image.
     * @summary Get Account Image By ID
     * @param {AccountApiGetImageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public getImageById(requestParameters: AccountApiGetImageByIdRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getImageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all account images for the ShipEngine account
     * @summary List Account Images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public listImages(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).listImages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all account settings for the ShipEngine account
     * @summary List Account Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public listSettings(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).listSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update information for an account image.
     * @summary Update Account Image By ID
     * @param {AccountApiUpdateImageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updateImageById(requestParameters: AccountApiUpdateImageByIdRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updateImageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
