/* tslint:disable */
/* eslint-disable */
/*
ShipEngine API

ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.

Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.

## Getting Started
If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.

Here are some step-by-step **tutorials** to get you started:

  - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
  - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)
  - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)
  - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)


## Shipping Labels for Every Major Carrier
ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).


## Real-Time Package Tracking
With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.


## Compare Shipping Costs Across Carriers
Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.


## Worldwide Address Validation
ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.


The version of the OpenAPI document: 1.1.202403202303
Contact: sales@shipengine.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressValidatingShipment } from '../models';
// @ts-ignore
import { AdvancedShipmentOptions } from '../models';
// @ts-ignore
import { CreateAndValidateShipment } from '../models';
// @ts-ignore
import { CreateShipmentsRequestBody } from '../models';
// @ts-ignore
import { CreateShipmentsResponseBody } from '../models';
// @ts-ignore
import { DeliveryConfirmation } from '../models';
// @ts-ignore
import { ErrorResponseBody } from '../models';
// @ts-ignore
import { InsuranceProvider } from '../models';
// @ts-ignore
import { ListShipmentsResponseBody } from '../models';
// @ts-ignore
import { OrderSourceName } from '../models';
// @ts-ignore
import { Package } from '../models';
// @ts-ignore
import { ParseShipmentRequestBody } from '../models';
// @ts-ignore
import { ParseShipmentResponseBody } from '../models';
// @ts-ignore
import { PartialShipment } from '../models';
// @ts-ignore
import { PartialShipmentCustoms } from '../models';
// @ts-ignore
import { RatesInformation } from '../models';
// @ts-ignore
import { ShipmentItem } from '../models';
// @ts-ignore
import { ShipmentStatus } from '../models';
// @ts-ignore
import { ShipmentsSortBy } from '../models';
// @ts-ignore
import { ShippingAddress } from '../models';
// @ts-ignore
import { ShippingAddressTo } from '../models';
// @ts-ignore
import { SortDir } from '../models';
// @ts-ignore
import { Tag } from '../models';
// @ts-ignore
import { TagShipmentResponseBody } from '../models';
// @ts-ignore
import { TaxIdentifier } from '../models';
// @ts-ignore
import { UpdateShipmentRequestBody } from '../models';
// @ts-ignore
import { UpdateShipmentsTags } from '../models';
// @ts-ignore
import { UpdateShipmentsTagsShipmentsTagsInner } from '../models';
// @ts-ignore
import { ValidateAddress } from '../models';
// @ts-ignore
import { Weight } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShipmentsApi - axios parameter creator
 * @export
 */
export const ShipmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query Shipments created using your own custom ID convention using this endpint
         * @summary Get Shipment By External ID
         * @param {string} externalShipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByExternalId: async (externalShipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalShipmentId' is not null or undefined
            assertParamExists('getByExternalId', 'externalShipmentId', externalShipmentId)
            const localVarPath = `/v1/shipments/external_shipment_id/{external_shipment_id}`
                .replace(`{${"external_shipment_id"}}`, encodeURIComponent(String(externalShipmentId !== undefined ? externalShipmentId : `-external_shipment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/external_shipment_id/{external_shipment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an individual shipment based on its ID
         * @summary Get Shipment By ID
         * @param {string} shipmentId Shipment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (shipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getById', 'shipmentId', shipmentId)
            const localVarPath = `/v1/shipments/{shipment_id}`
                .replace(`{${"shipment_id"}}`, encodeURIComponent(String(shipmentId !== undefined ? shipmentId : `-shipment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/{shipment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Rates for the shipment information associated with the shipment ID
         * @summary Get Shipment Rates
         * @param {string} shipmentId Shipment ID
         * @param {string} [createdAtStart] Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatesForShipment: async (shipmentId: string, createdAtStart?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getRatesForShipment', 'shipmentId', shipmentId)
            const localVarPath = `/v1/shipments/{shipment_id}/rates`
                .replace(`{${"shipment_id"}}`, encodeURIComponent(String(shipmentId !== undefined ? shipmentId : `-shipment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })
            if (createdAtStart !== undefined) {
                localVarQueryParameter['created_at_start'] = (createdAtStart as any instanceof Date) ?
                    (createdAtStart as any).toISOString() :
                    createdAtStart;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/{shipment_id}/rates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Shipment tags based on its ID
         * @summary Get Shipment Tags
         * @param {string} shipmentId Shipment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsById: async (shipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getTagsById', 'shipmentId', shipmentId)
            const localVarPath = `/v1/shipments/{shipment_id}/tags`
                .replace(`{${"shipment_id"}}`, encodeURIComponent(String(shipmentId !== undefined ? shipmentId : `-shipment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/{shipment_id}/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people\'s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine\'s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that\'s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  > **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
         * @summary Parse shipping info
         * @param {ParseShipmentRequestBody} parseShipmentRequestBody The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment: async (parseShipmentRequestBody: ParseShipmentRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parseShipmentRequestBody' is not null or undefined
            assertParamExists('shipment', 'parseShipmentRequestBody', parseShipmentRequestBody)
            const localVarPath = `/v1/shipments/recognize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: parseShipmentRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/recognize',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(parseShipmentRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a shipment object based on its ID
         * @summary Update Shipment By ID
         * @param {string} shipmentId Shipment ID
         * @param {UpdateShipmentRequestBody} updateShipmentRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment_1: async (shipmentId: string, updateShipmentRequestBody: UpdateShipmentRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('shipment_1', 'shipmentId', shipmentId)
            // verify required parameter 'updateShipmentRequestBody' is not null or undefined
            assertParamExists('shipment_1', 'updateShipmentRequestBody', updateShipmentRequestBody)
            const localVarPath = `/v1/shipments/{shipment_id}`
                .replace(`{${"shipment_id"}}`, encodeURIComponent(String(shipmentId !== undefined ? shipmentId : `-shipment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateShipmentRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/{shipment_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateShipmentRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a tag to the shipment object
         * @summary Add Tag to Shipment
         * @param {string} shipmentId Shipment ID
         * @param {string} tagName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment_2: async (shipmentId: string, tagName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('shipment_2', 'shipmentId', shipmentId)
            // verify required parameter 'tagName' is not null or undefined
            assertParamExists('shipment_2', 'tagName', tagName)
            const localVarPath = `/v1/shipments/{shipment_id}/tags/{tag_name}`
                .replace(`{${"shipment_id"}}`, encodeURIComponent(String(shipmentId !== undefined ? shipmentId : `-shipment_id-`)))
                .replace(`{${"tag_name"}}`, encodeURIComponent(String(tagName !== undefined ? tagName : `-tag_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/{shipment_id}/tags/{tag_name}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an existing tag from the Shipment object
         * @summary Remove Tag from Shipment
         * @param {string} shipmentId Shipment ID
         * @param {string} tagName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment_3: async (shipmentId: string, tagName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('shipment_3', 'shipmentId', shipmentId)
            // verify required parameter 'tagName' is not null or undefined
            assertParamExists('shipment_3', 'tagName', tagName)
            const localVarPath = `/v1/shipments/{shipment_id}/tags/{tag_name}`
                .replace(`{${"shipment_id"}}`, encodeURIComponent(String(shipmentId !== undefined ? shipmentId : `-shipment_id-`)))
                .replace(`{${"tag_name"}}`, encodeURIComponent(String(tagName !== undefined ? tagName : `-tag_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/{shipment_id}/tags/{tag_name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of Shipments
         * @summary List Shipments
         * @param {ShipmentStatus} [shipmentStatus] 
         * @param {string} [batchId] Batch ID
         * @param {string} [tag] Search for shipments based on the custom tag added to the shipment object
         * @param {string} [createdAtStart] Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
         * @param {string} [createdAtEnd] Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time)
         * @param {string} [modifiedAtStart] Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time)
         * @param {string} [modifiedAtEnd] Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time)
         * @param {number} [page] Return a specific page of results. Defaults to the first page. If set to a number that\&#39;s greater than the number of pages of results, an empty page is returned. 
         * @param {number} [pageSize] The number of results to return per response.
         * @param {string} [salesOrderId] Sales Order ID
         * @param {SortDir} [sortDir] Controls the sort order of the query.
         * @param {ShipmentsSortBy} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipments: async (shipmentStatus?: ShipmentStatus, batchId?: string, tag?: string, createdAtStart?: string, createdAtEnd?: string, modifiedAtStart?: string, modifiedAtEnd?: string, page?: number, pageSize?: number, salesOrderId?: string, sortDir?: SortDir, sortBy?: ShipmentsSortBy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })
            if (shipmentStatus !== undefined) {
                localVarQueryParameter['shipment_status'] = shipmentStatus;
            }

            if (batchId !== undefined) {
                localVarQueryParameter['batch_id'] = batchId;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (createdAtStart !== undefined) {
                localVarQueryParameter['created_at_start'] = (createdAtStart as any instanceof Date) ?
                    (createdAtStart as any).toISOString() :
                    createdAtStart;
            }

            if (createdAtEnd !== undefined) {
                localVarQueryParameter['created_at_end'] = (createdAtEnd as any instanceof Date) ?
                    (createdAtEnd as any).toISOString() :
                    createdAtEnd;
            }

            if (modifiedAtStart !== undefined) {
                localVarQueryParameter['modified_at_start'] = (modifiedAtStart as any instanceof Date) ?
                    (modifiedAtStart as any).toISOString() :
                    modifiedAtStart;
            }

            if (modifiedAtEnd !== undefined) {
                localVarQueryParameter['modified_at_end'] = (modifiedAtEnd as any instanceof Date) ?
                    (modifiedAtEnd as any).toISOString() :
                    modifiedAtEnd;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (salesOrderId !== undefined) {
                localVarQueryParameter['sales_order_id'] = salesOrderId;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create one or multiple shipments.
         * @summary Create Shipments
         * @param {CreateShipmentsRequestBody} createShipmentsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipments_4: async (createShipmentsRequestBody: CreateShipmentsRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createShipmentsRequestBody' is not null or undefined
            assertParamExists('shipments_4', 'createShipmentsRequestBody', createShipmentsRequestBody)
            const localVarPath = `/v1/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createShipmentsRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createShipmentsRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries `pending` shipments. Marking a shipment as cancelled would remove it from this process 
         * @summary Cancel a Shipment
         * @param {string} shipmentId Shipment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipments_5: async (shipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('shipments_5', 'shipmentId', shipmentId)
            const localVarPath = `/v1/shipments/{shipment_id}/cancel`
                .replace(`{${"shipment_id"}}`, encodeURIComponent(String(shipmentId !== undefined ? shipmentId : `-shipment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/{shipment_id}/cancel',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Shipments Tags
         * @summary Update Shipments Tags
         * @param {UpdateShipmentsTags} updateShipmentsTags 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTags: async (updateShipmentsTags: UpdateShipmentsTags, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateShipmentsTags' is not null or undefined
            assertParamExists('updateTags', 'updateShipmentsTags', updateShipmentsTags)
            const localVarPath = `/v1/shipments/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "API-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateShipmentsTags,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/shipments/tags',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateShipmentsTags, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentsApi - functional programming interface
 * @export
 */
export const ShipmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Query Shipments created using your own custom ID convention using this endpint
         * @summary Get Shipment By External ID
         * @param {ShipmentsApiGetByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByExternalId(requestParameters: ShipmentsApiGetByExternalIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartialShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByExternalId(requestParameters.externalShipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an individual shipment based on its ID
         * @summary Get Shipment By ID
         * @param {ShipmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ShipmentsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartialShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Rates for the shipment information associated with the shipment ID
         * @summary Get Shipment Rates
         * @param {ShipmentsApiGetRatesForShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRatesForShipment(requestParameters: ShipmentsApiGetRatesForShipmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatesInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRatesForShipment(requestParameters.shipmentId, requestParameters.createdAtStart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Shipment tags based on its ID
         * @summary Get Shipment Tags
         * @param {ShipmentsApiGetTagsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsById(requestParameters: ShipmentsApiGetTagsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagShipmentResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsById(requestParameters.shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people\'s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine\'s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that\'s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  > **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
         * @summary Parse shipping info
         * @param {ShipmentsApiShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipment(requestParameters: ShipmentsApiShipmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParseShipmentResponseBody>> {
            const parseShipmentRequestBody: ParseShipmentRequestBody = {
                text: requestParameters.text,
                shipment: requestParameters.shipment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipment(parseShipmentRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a shipment object based on its ID
         * @summary Update Shipment By ID
         * @param {ShipmentsApiShipment0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipment_1(requestParameters: ShipmentsApiShipment0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAndValidateShipment>> {
            const updateShipmentRequestBody: UpdateShipmentRequestBody = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipment_1(requestParameters.shipmentId, updateShipmentRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a tag to the shipment object
         * @summary Add Tag to Shipment
         * @param {ShipmentsApiShipment1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipment_2(requestParameters: ShipmentsApiShipment1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagShipmentResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipment_2(requestParameters.shipmentId, requestParameters.tagName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an existing tag from the Shipment object
         * @summary Remove Tag from Shipment
         * @param {ShipmentsApiShipment2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipment_3(requestParameters: ShipmentsApiShipment2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipment_3(requestParameters.shipmentId, requestParameters.tagName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of Shipments
         * @summary List Shipments
         * @param {ShipmentsApiShipmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipments(requestParameters: ShipmentsApiShipmentsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipments(requestParameters.shipmentStatus, requestParameters.batchId, requestParameters.tag, requestParameters.createdAtStart, requestParameters.createdAtEnd, requestParameters.modifiedAtStart, requestParameters.modifiedAtEnd, requestParameters.page, requestParameters.pageSize, requestParameters.salesOrderId, requestParameters.sortDir, requestParameters.sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create one or multiple shipments.
         * @summary Create Shipments
         * @param {ShipmentsApiShipments0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipments_4(requestParameters: ShipmentsApiShipments0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShipmentsResponseBody>> {
            const createShipmentsRequestBody: CreateShipmentsRequestBody = {
                shipments: requestParameters.shipments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipments_4(createShipmentsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries `pending` shipments. Marking a shipment as cancelled would remove it from this process 
         * @summary Cancel a Shipment
         * @param {ShipmentsApiShipments1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipments_5(requestParameters: ShipmentsApiShipments1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipments_5(requestParameters.shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Shipments Tags
         * @summary Update Shipments Tags
         * @param {ShipmentsApiUpdateTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTags(requestParameters: ShipmentsApiUpdateTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateShipmentsTags: UpdateShipmentsTags = {
                shipments_tags: requestParameters.shipments_tags
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTags(updateShipmentsTags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentsApi - factory interface
 * @export
 */
export const ShipmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentsApiFp(configuration)
    return {
        /**
         * Query Shipments created using your own custom ID convention using this endpint
         * @summary Get Shipment By External ID
         * @param {ShipmentsApiGetByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByExternalId(requestParameters: ShipmentsApiGetByExternalIdRequest, options?: AxiosRequestConfig): AxiosPromise<PartialShipment> {
            return localVarFp.getByExternalId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an individual shipment based on its ID
         * @summary Get Shipment By ID
         * @param {ShipmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ShipmentsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PartialShipment> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Rates for the shipment information associated with the shipment ID
         * @summary Get Shipment Rates
         * @param {ShipmentsApiGetRatesForShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatesForShipment(requestParameters: ShipmentsApiGetRatesForShipmentRequest, options?: AxiosRequestConfig): AxiosPromise<RatesInformation> {
            return localVarFp.getRatesForShipment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Shipment tags based on its ID
         * @summary Get Shipment Tags
         * @param {ShipmentsApiGetTagsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsById(requestParameters: ShipmentsApiGetTagsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TagShipmentResponseBody> {
            return localVarFp.getTagsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people\'s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine\'s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that\'s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  > **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
         * @summary Parse shipping info
         * @param {ShipmentsApiShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment(requestParameters: ShipmentsApiShipmentRequest, options?: AxiosRequestConfig): AxiosPromise<ParseShipmentResponseBody> {
            return localVarFp.shipment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shipment object based on its ID
         * @summary Update Shipment By ID
         * @param {ShipmentsApiShipment0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment_1(requestParameters: ShipmentsApiShipment0Request, options?: AxiosRequestConfig): AxiosPromise<CreateAndValidateShipment> {
            return localVarFp.shipment_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a tag to the shipment object
         * @summary Add Tag to Shipment
         * @param {ShipmentsApiShipment1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment_2(requestParameters: ShipmentsApiShipment1Request, options?: AxiosRequestConfig): AxiosPromise<TagShipmentResponseBody> {
            return localVarFp.shipment_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an existing tag from the Shipment object
         * @summary Remove Tag from Shipment
         * @param {ShipmentsApiShipment2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipment_3(requestParameters: ShipmentsApiShipment2Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.shipment_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of Shipments
         * @summary List Shipments
         * @param {ShipmentsApiShipmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipments(requestParameters: ShipmentsApiShipmentsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListShipmentsResponseBody> {
            return localVarFp.shipments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create one or multiple shipments.
         * @summary Create Shipments
         * @param {ShipmentsApiShipments0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipments_4(requestParameters: ShipmentsApiShipments0Request, options?: AxiosRequestConfig): AxiosPromise<CreateShipmentsResponseBody> {
            return localVarFp.shipments_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries `pending` shipments. Marking a shipment as cancelled would remove it from this process 
         * @summary Cancel a Shipment
         * @param {ShipmentsApiShipments1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipments_5(requestParameters: ShipmentsApiShipments1Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.shipments_5(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Shipments Tags
         * @summary Update Shipments Tags
         * @param {ShipmentsApiUpdateTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTags(requestParameters: ShipmentsApiUpdateTagsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTags(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByExternalId operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiGetByExternalIdRequest
 */
export type ShipmentsApiGetByExternalIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ShipmentsApiGetByExternalId
    */
    readonly externalShipmentId: string
    
}

/**
 * Request parameters for getById operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiGetByIdRequest
 */
export type ShipmentsApiGetByIdRequest = {
    
    /**
    * Shipment ID
    * @type {string}
    * @memberof ShipmentsApiGetById
    */
    readonly shipmentId: string
    
}

/**
 * Request parameters for getRatesForShipment operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiGetRatesForShipmentRequest
 */
export type ShipmentsApiGetRatesForShipmentRequest = {
    
    /**
    * Shipment ID
    * @type {string}
    * @memberof ShipmentsApiGetRatesForShipment
    */
    readonly shipmentId: string
    
    /**
    * Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
    * @type {string}
    * @memberof ShipmentsApiGetRatesForShipment
    */
    readonly createdAtStart?: string
    
}

/**
 * Request parameters for getTagsById operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiGetTagsByIdRequest
 */
export type ShipmentsApiGetTagsByIdRequest = {
    
    /**
    * Shipment ID
    * @type {string}
    * @memberof ShipmentsApiGetTagsById
    */
    readonly shipmentId: string
    
}

/**
 * Request parameters for shipment operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiShipmentRequest
 */
export type ShipmentsApiShipmentRequest = {
    
} & ParseShipmentRequestBody

/**
 * Request parameters for shipment_1 operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiShipment0Request
 */
export type ShipmentsApiShipment0Request = {
    
    /**
    * Shipment ID
    * @type {string}
    * @memberof ShipmentsApiShipment0
    */
    readonly shipmentId: string
    
} & UpdateShipmentRequestBody

/**
 * Request parameters for shipment_2 operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiShipment1Request
 */
export type ShipmentsApiShipment1Request = {
    
    /**
    * Shipment ID
    * @type {string}
    * @memberof ShipmentsApiShipment1
    */
    readonly shipmentId: string
    
    /**
    * 
    * @type {string}
    * @memberof ShipmentsApiShipment1
    */
    readonly tagName: string
    
}

/**
 * Request parameters for shipment_3 operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiShipment2Request
 */
export type ShipmentsApiShipment2Request = {
    
    /**
    * Shipment ID
    * @type {string}
    * @memberof ShipmentsApiShipment2
    */
    readonly shipmentId: string
    
    /**
    * 
    * @type {string}
    * @memberof ShipmentsApiShipment2
    */
    readonly tagName: string
    
}

/**
 * Request parameters for shipments operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiShipmentsRequest
 */
export type ShipmentsApiShipmentsRequest = {
    
    /**
    * 
    * @type {ShipmentStatus}
    * @memberof ShipmentsApiShipments
    */
    readonly shipmentStatus?: ShipmentStatus
    
    /**
    * Batch ID
    * @type {string}
    * @memberof ShipmentsApiShipments
    */
    readonly batchId?: string
    
    /**
    * Search for shipments based on the custom tag added to the shipment object
    * @type {string}
    * @memberof ShipmentsApiShipments
    */
    readonly tag?: string
    
    /**
    * Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
    * @type {string}
    * @memberof ShipmentsApiShipments
    */
    readonly createdAtStart?: string
    
    /**
    * Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time)
    * @type {string}
    * @memberof ShipmentsApiShipments
    */
    readonly createdAtEnd?: string
    
    /**
    * Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time)
    * @type {string}
    * @memberof ShipmentsApiShipments
    */
    readonly modifiedAtStart?: string
    
    /**
    * Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time)
    * @type {string}
    * @memberof ShipmentsApiShipments
    */
    readonly modifiedAtEnd?: string
    
    /**
    * Return a specific page of results. Defaults to the first page. If set to a number that\'s greater than the number of pages of results, an empty page is returned. 
    * @type {number}
    * @memberof ShipmentsApiShipments
    */
    readonly page?: number
    
    /**
    * The number of results to return per response.
    * @type {number}
    * @memberof ShipmentsApiShipments
    */
    readonly pageSize?: number
    
    /**
    * Sales Order ID
    * @type {string}
    * @memberof ShipmentsApiShipments
    */
    readonly salesOrderId?: string
    
    /**
    * Controls the sort order of the query.
    * @type {SortDir}
    * @memberof ShipmentsApiShipments
    */
    readonly sortDir?: SortDir
    
    /**
    * 
    * @type {ShipmentsSortBy}
    * @memberof ShipmentsApiShipments
    */
    readonly sortBy?: ShipmentsSortBy
    
}

/**
 * Request parameters for shipments_4 operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiShipments0Request
 */
export type ShipmentsApiShipments0Request = {
    
} & CreateShipmentsRequestBody

/**
 * Request parameters for shipments_5 operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiShipments1Request
 */
export type ShipmentsApiShipments1Request = {
    
    /**
    * Shipment ID
    * @type {string}
    * @memberof ShipmentsApiShipments1
    */
    readonly shipmentId: string
    
}

/**
 * Request parameters for updateTags operation in ShipmentsApi.
 * @export
 * @interface ShipmentsApiUpdateTagsRequest
 */
export type ShipmentsApiUpdateTagsRequest = {
    
} & UpdateShipmentsTags

/**
 * ShipmentsApiGenerated - object-oriented interface
 * @export
 * @class ShipmentsApiGenerated
 * @extends {BaseAPI}
 */
export class ShipmentsApiGenerated extends BaseAPI {
    /**
     * Query Shipments created using your own custom ID convention using this endpint
     * @summary Get Shipment By External ID
     * @param {ShipmentsApiGetByExternalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public getByExternalId(requestParameters: ShipmentsApiGetByExternalIdRequest, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).getByExternalId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an individual shipment based on its ID
     * @summary Get Shipment By ID
     * @param {ShipmentsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public getById(requestParameters: ShipmentsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Rates for the shipment information associated with the shipment ID
     * @summary Get Shipment Rates
     * @param {ShipmentsApiGetRatesForShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public getRatesForShipment(requestParameters: ShipmentsApiGetRatesForShipmentRequest, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).getRatesForShipment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Shipment tags based on its ID
     * @summary Get Shipment Tags
     * @param {ShipmentsApiGetTagsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public getTagsById(requestParameters: ShipmentsApiGetTagsByIdRequest, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).getTagsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people\'s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine\'s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that\'s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  > **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     * @summary Parse shipping info
     * @param {ShipmentsApiShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public shipment(requestParameters: ShipmentsApiShipmentRequest, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).shipment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a shipment object based on its ID
     * @summary Update Shipment By ID
     * @param {ShipmentsApiShipment0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public shipment_1(requestParameters: ShipmentsApiShipment0Request, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).shipment_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a tag to the shipment object
     * @summary Add Tag to Shipment
     * @param {ShipmentsApiShipment1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public shipment_2(requestParameters: ShipmentsApiShipment1Request, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).shipment_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an existing tag from the Shipment object
     * @summary Remove Tag from Shipment
     * @param {ShipmentsApiShipment2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public shipment_3(requestParameters: ShipmentsApiShipment2Request, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).shipment_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of Shipments
     * @summary List Shipments
     * @param {ShipmentsApiShipmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public shipments(requestParameters: ShipmentsApiShipmentsRequest = {}, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).shipments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create one or multiple shipments.
     * @summary Create Shipments
     * @param {ShipmentsApiShipments0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public shipments_4(requestParameters: ShipmentsApiShipments0Request, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).shipments_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries `pending` shipments. Marking a shipment as cancelled would remove it from this process 
     * @summary Cancel a Shipment
     * @param {ShipmentsApiShipments1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public shipments_5(requestParameters: ShipmentsApiShipments1Request, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).shipments_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Shipments Tags
     * @summary Update Shipments Tags
     * @param {ShipmentsApiUpdateTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApiGenerated
     */
    public updateTags(requestParameters: ShipmentsApiUpdateTagsRequest, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).updateTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
